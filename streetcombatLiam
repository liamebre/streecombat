import pygame
import random
import os
from random import random, randint, seed
WHITE = (255, 255, 255)
BLACK = (0, 0, 0)
RED = (255, 0, 0)
GREEN = (0, 255, 0)
BLUE = (0, 0, 255)

game_state = "start"

pygame.init()
pygame.mixer.init()
game_folder = os.path.dirname(__file__)
img_folder = os.path.join(game_folder, "img")

WIDTH = 1300
HEIGHT = 700
win = pygame.display.set_mode((WIDTH,HEIGHT))
FPS = 30
pHealth = [100,100]
nump = 2
background = pygame.image.load(os.path.join(img_folder, "fitbg.png"))
start = pygame.image.load(os.path.join(img_folder, "start.png"))
gameover = pygame.image.load(os.path.join(img_folder, "gameover.png"))
font_name = pygame.font.match_font("arial",False,False )


def draw_text(surf,text,size,x, y):
    font = pygame.font.Font(font_name,size)
    text_surface = font.render(text, True, RED)
    text_rect = text_surface.get_rect()
    text_rect.midtop = (x, y)
    surf.blit(text_surface, text_rect)


background_rect = background.get_rect()


class Player(pygame.sprite.Sprite):
    def __init__(self, p, num, nump):
        pygame.sprite.Sprite.__init__(self)
        if num == 1:
            self.image = pygame.image.load(os.path.join(img_folder, "guy.png")).convert()
        if num == 2:
            self.image = pygame.image.load(os.path.join(img_folder, "guy2.png")).convert()
        self.rect = self.image.get_rect()
        self.rect.x = (WIDTH/8) * p
        self.rect.bottom = HEIGHT - 165
        self.x_speed = 10
        self.num = num
        self.heath = 15
        self.y_vel = 10
        self.grav = 1
        self.jump_height = 25
        self.jump_speed = self.jump_height
        self.jump = False
        self.block1 = False
        self.block2 = False
        self.numb = nump

    def update(self):
        self.x_speed = 0
        self.block2 = False
        self.block1 = False
        keys = pygame.key.get_pressed()  # movement
        if keys[pygame.K_j] and self.num == 2 and not self.rect.x < -50 and self.numb ==2 :
            self.x_speed = -20
        if keys[pygame.K_l] and self.num == 2 and not self.rect.x > WIDTH - 150 and self.numb ==2 :
            self.x_speed = 20
        if keys[pygame.K_a] and self.num == 1 and not self.rect.x < -50 and self.numb ==2 :
            self.x_speed = -20
        if keys[pygame.K_d] and self.num == 1 and not self.rect.x > WIDTH - 150 and self.numb ==2 :
            self.x_speed = 20
        if keys[pygame.K_i] and self.num == 2 and self.numb ==2 :
            self.jump = True
        if keys[pygame.K_k] and self.num == 2:  # failed blocking
            self.block2 = True
        if keys[pygame.K_s] and self.num == 1:
            self.block1 = True
        if self.jump:  # jumping 1
            self.rect.y -= self.jump_speed
            self.jump_speed -= self.grav
            if self.jump_speed < -self.jump_height:
                self.jump_speed = self.jump_height
                self.jump = False
        if keys[pygame.K_w] and self.num == 1 and self.numb == 2 :
            self.jump = True
        if self.jump:  # jumping 2
            self.rect.y -= self.jump_speed
            self.jump_speed -= self.grav
            if self.jump_speed < -self.jump_height:
                self.jump_speed = self.jump_height
                self.jump = False
        self.rect.right += self.x_speed
        # checks for collsion
        bing = pygame.sprite.groupcollide(fists, players, True, False)
        if bing and self.block2 is False:
            print("1 hit")
            pHealth[1] -= 10
            print(pHealth)
            if pHealth[1] == 0:
                player2.kill()
                self.numb -= 1
                menu.gameover(self.numb)
        bonk = pygame.sprite.groupcollide(fists2, players2, True, False)
        if bonk and self.block1 is False:
            print("2 hit")
            pHealth[0] -= 10
            if pHealth[0] == 0:
                player.kill()
                self.numb -= 1
                menu.gameover(self.numb)
            print(pHealth)


    # is the fist action
    def swing(self,num,type):
        if self.numb >1:
            if num == 1 and type == 1:
                swings = Punch(player.rect.x + 190,player.rect.y + 180,num,type)
            if num == 2 and type == 1 :
                swings = Punch(player2.rect.x,player2.rect.y + 180,num,type)
            if num == 1 and type == 2:
                swings = Punch(player.rect.x + 190, player.rect.y + 180, num, type)
            if num == 2 and type == 2:
                swings = Punch(player2.rect.x, player2.rect.y + 180, num, type)
            all_sprites.add(swings)
            if num == 2:
                fists2.add(swings)
            if num == 1:
                fists.add(swings)


class menu():
    def __init__(self):
        pygame.sprite.Sprite.__init__(self)
    def gameover(self):#death
        keys = pygame.key.get_pressed()
        draw_text(win, "game over", 76, WIDTH / 2, HEIGHT / 2 - 100)
        draw_text(win, "press (r) to restart", 76, WIDTH / 2, HEIGHT / 2 )
        if keys[pygame.K_r]:
            print("restart")



# adds attacks
class Punch(pygame.sprite.Sprite):
    def __init__(self,x,y,num,type):
        pygame.sprite.Sprite.__init__(self)
        if num == 1 and type == 1 :
            self.image = pygame.image.load(os.path.join(img_folder, "arm1.png")).convert()
        if num == 2 and type == 1:
            self.image = pygame.image.load(os.path.join(img_folder, "arm2.png")).convert()
        if num == 1 and type == 2 :
            self.image = pygame.image.load(os.path.join(img_folder, "bullet1.png")).convert()
        if num == 2 and type == 2:
            self.image = pygame.image.load(os.path.join(img_folder, "bullet.png")).convert()
        self.image.set_colorkey(BLACK)
        self.rect = self.image.get_rect()
        self.rect.bottom = y
        self.rect.centerx = x
        self.num = num
        self.type = type
        if num == 1:
            self.y_speed = -25
        if num == 2:
            self.y_speed = 25

    def update(self):
        # makes fist move
        self.rect.x -= self.y_speed
        # gives the attack its range
        self.num +=1
        if self.num == 6 and self.type == 1:
            self.kill()
        if self.num == 20 and self.type == 2:
            self.kill()


# health
class Health(pygame.sprite.Sprite,):
    def __init__(self,x,y):
        pygame.sprite.Sprite.__init__(self)
        self.image = pygame.image.load(os.path.join(img_folder, "PlayerHP1.png")).convert()
        self.rect = self.image.get_rect()
        self.rect.x = x
        self.rect.y = y
        self.HP = 320
    def update(self):
        pass

all_sprites=pygame.sprite.Group()
player = Player(1,1,nump)
player2 = Player(6,2,nump)
players = pygame.sprite.Group()
players2 = pygame.sprite.Group()
fists = pygame.sprite.Group()
fists2 = pygame.sprite.Group()
health1 = Health(25,  10)
health2 = Health(WIDTH - 225, 10)
healths = pygame.sprite.Group()
healths.add(health1, health2)
players2.add(player)
players.add(player2)
all_sprites.add(player, player2,healths)

pygame.display.set_caption("street combat")
clock=pygame.time.Clock()
run = True
while run:  # keep looping
    clock.tick(FPS)
    # refresh rate
    for event in pygame.event.get():
        if event.type == pygame.QUIT:  # x in top right
            run = False
        elif event.type == pygame.KEYDOWN:
            if event.key == pygame.K_SPACE:
                player.swing(1, 1)
            if event.key == pygame.K_f:
                player.swing(1, 2)
            if event.key == pygame.K_SEMICOLON:
                player.swing(2, 1)
            if event.key == pygame.K_QUOTE:
                player.swing(2, 2)
            # set background Colour
    if player.numb == 1:
        game_state = "gameover"
    if game_state == "gameover":
        win.fill(WHITE)
        win.blit(gameover, background_rect)
        keys = pygame.key.get_pressed()  # movement
        if keys[pygame.K_r]:
            game_state = "play"
            player2.kill()
            player.kill()
            player = Player(1, 1, nump)
            player2 = Player(6, 2, nump)
            players = pygame.sprite.Group()
            players2 = pygame.sprite.Group()
            players2.add(player)
            players.add(player2)
            all_sprites.add(player, player2)
            pHealth = [100, 100]

    if game_state == "start":
        win.fill(BLACK)
        win.blit(start, background_rect)
        keys = pygame.key.get_pressed()  # movement
        if keys[pygame.K_r]:
            game_state = "play"
    if game_state == "play":
        win.fill(BLACK)
        win.blit(background, background_rect)
        all_sprites.update()
        all_sprites.draw(win)
        # draw rectangle in position and set colour
        # redraw the screen
    pygame.display.flip()
pygame.quit()  # exit game
